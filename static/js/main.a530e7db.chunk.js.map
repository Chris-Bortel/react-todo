{"version":3,"sources":["hooks/useForm.js","components/todo/form.js","context/settings.js","components/todo/list.js","components/header.js","url.js","components/todo/settingsModal.js","App.js","reportWebVitals.js","index.js"],"names":["useForm","submitCallback","useState","values","setValues","handleSubmit","e","preventDefault","target","reset","handleChange","persist","name","value","Number","TodoForm","props","disabled","submitBtnStatus","setSubmitBtnStatus","useEffect","item","assignee","Form","onSubmit","Card","Body","Title","Group","controlId","Label","Control","required","autoComplete","type","placeholder","onChange","defaultValue","min","max","Button","variant","SettingsContext","React","createContext","Settings","showCompleted","maxNum","sort","sortOrder","settings","setSettings","Provider","children","TodoList","settingsContext","useContext","page1","pages","setPages","pageNum","list","currentPage","setCurrentPage","changePage","number","listArr","displayList","filter","complete","key","order","a","b","valueA","toLowerCase","valueB","comparison","sortList","length","totalNumOfPages","Math","ceil","buildingPages","i","listsForEachPage","slice","applySettings","condition","error","Alert","className","map","Toast","onClose","handleDelete","_id","style","width","maxWidth","Header","onClick","handleComplete","difficulty","items","len","Object","keys","push","Pagination","Item","active","renderPagination","Navbar","bg","Brand","href","SettingsModel","newSettingsData","handleClose","Modal","show","onHide","closeButton","as","App","setList","setError","showSettings","setShowSettings","config","method","url","data","axios","fetchToDoList","message","id","localRefresh","newList","splice","itemIndex","indexOf","toggleSettings","getToDoList","document","title","Container","Row","Col","lg","md","sm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a530e7db.chunk.js","sourcesContent":["import {useState} from 'react';\n\nexport default function useForm(submitCallback, inputCallback=null){\n  const [values, setValues] = useState({});\n\n  function handleSubmit (e) {\n    e.preventDefault();\n    e.target.reset();\n    submitCallback && submitCallback(values);\n    setValues({});\n  }\n\n  function handleChange (e){\n    e.persist();\n\n    if (e.target.name === 'maxNum' || e.target.name === 'difficulty') {\n      setValues({...values,[e.target.name]: Number(e.target.value)});\n      return;\n    }\n\n    if (e.target.name === 'showCompleted') {\n\n      setValues({...values,[e.target.name]: e.target.value==='yes'? true:false});\n      return;\n    }\n    \n    setValues({...values,[e.target.name]: e.target.value});\n  }\n\n  return [handleSubmit, handleChange, values];\n}","import React, {useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport {Form, Button, Card} from 'react-bootstrap';\nimport useForm from '../../hooks/useForm';\n\nexport default function TodoForm (props){\n\n  const [handleSubmit, handleChange, values] = useForm(props.handleSubmit);\n  const [submitBtnStatus, setSubmitBtnStatus] = useState({disabled:true});\n\n  useEffect(()=>{\n    if (values.item && values.assignee){\n      setSubmitBtnStatus({disabled: false});\n    } else {\n      setSubmitBtnStatus({disabled: true});\n    }\n  },[values]);\n  \n  return (\n    <>\n      <Form onSubmit={handleSubmit} >\n        <Card>\n          <Card.Body>\n            <Card.Title>Add To Do Item</Card.Title>\n\n            <Form.Group controlId=\"item\">\n              <Form.Label>To Do Item</Form.Label>\n              <Form.Control \n                required\n                autoComplete=\"off\"\n                name=\"item\"\n                type=\"text\"\n                placeholder=\"Item Details\"\n                onChange={handleChange}\n              />\n            </Form.Group>\n\n            <Form.Group controlId=\"assignee\">\n              <Form.Label>Assigned To</Form.Label>\n              <Form.Control \n                required\n                autoComplete=\"off\"\n                name=\"assignee\"\n                type=\"text\"\n                placeholder=\"Assignee Name\"\n                onChange={handleChange}\n              />\n            </Form.Group>\n            \n            <Form.Group controlId=\"difficulty\">\n              <Form.Label>Difficulty Rating</Form.Label>\n              <Form.Control \n                required\n                defaultValue=\"1\"\n                type=\"range\"\n                min=\"1\"\n                max=\"5\"\n                name=\"difficulty\"\n                placeholder=\"Assignee Name\"\n                onChange={handleChange}\n              />\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\" disabled={submitBtnStatus.disabled} >Add Item</Button>\n          </Card.Body>\n        </Card>\n      </Form>\n    </>\n  );\n}\nTodoForm.propTypes = {\n  handleSubmit: PropTypes.func,\n};\n","import React, {useState} from 'react';\n\nexport const SettingsContext = React.createContext();\n\nfunction Settings(props){\n  const initSettings = {\n    showCompleted: false,\n    maxNum: 5,\n    sort: 'difficulty',\n    sortOrder: 'ascending',\n  };\n\n  const [settings, setSettings] = useState(initSettings);\n\n  return (\n    <SettingsContext.Provider value = {{settings, setSettings}}>\n      {props.children}\n    </SettingsContext.Provider>\n  );\n\n}\n\nimport PropTypes from 'prop-types';\nSettings.propTypes = {\n  children: PropTypes.object,\n};\n\nexport default Settings;\n","import React, {useState, useContext, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport {Alert, Toast, Pagination} from 'react-bootstrap';\nimport {If, Then, Else} from 'react-if';\nimport {SettingsContext} from '../../context/settings.js';\n\nexport default function TodoList (props){\n\n  const settingsContext = useContext(SettingsContext);\n  const [pages, setPages] = useState({page1:[]});\n  const [currentPage, setCurrentPage] = useState({pageNum:1,list:[] });\n\n  // apply all settings whenever given list got changed, or settings are changed.\n  useEffect(()=>{\n    applySettings(props.list);\n  },[props.list, settingsContext]);\n\n  //initialize the pages to show page1 as current page, whenever the whole pages sys get changed.\n  useEffect(()=>{\n    setCurrentPage({ pageNum: 1, list: pages.page1});\n  },[pages]);\n\n\n  /**\n   * \n   * @param {string} key The key you want to sort with\n   * @param {string} order apple in ascending or decending order\n   */\n  function sortList(key, order='ascending'){\n    return function innerSort(a,b){\n      if (!a[key] || !b[key]){\n        return 0;\n      }\n\n      const valueA = (typeof a[key]==='string') ? a[key].toLowerCase() : a[key];\n      const valueB = (typeof b[key]==='string') ? b[key].toLowerCase() : b[key];\n\n      let comparison = 0;\n      if (valueA > valueB) comparison = 1;\n      else if (valueA < valueB) comparison = -1;\n\n      return order === 'descending' ? comparison*-1 : comparison;\n    };\n  }\n\n  /**\n   * \n   * @param {array} listArr apply all settings to the given list array\n   */\n  function applySettings(listArr){\n    let displayList=[];\n    const {showCompleted, maxNum, sort, sortOrder} = settingsContext.settings;\n\n    //apply the show completed item ssetting.\n    if (showCompleted===false){\n      displayList = listArr.filter(item => item.complete===false);\n    } else displayList = listArr;\n\n    //apply the sort and sort order setting\n    displayList.sort(sortList(sort, sortOrder));\n\n    //apply how many items per page settings and create the pages sys\n    if (maxNum < displayList.length) {\n      let totalNumOfPages = Math.ceil(displayList.length / maxNum);\n      let buildingPages = {};\n\n      for (let i = 0; i<totalNumOfPages; i++){\n        let listsForEachPage = displayList.slice(i*maxNum,i*maxNum+maxNum);\n        buildingPages[`page${i+1}`]=listsForEachPage;\n      }\n      setPages(buildingPages);\n\n    } else {\n      setPages({page1: displayList});\n    }\n\n  }\n\n  function changePage(number){\n    setCurrentPage({pageNum:number, list:pages[`page${number}`]});\n  }\n\n  function renderPagination(activePage=1){\n    let items = [];\n    const len = Object.keys(pages).length;\n    for (let number = 1; number <= len ; number++) {\n      items.push(\n        <Pagination.Item \n          key={number} \n          active={number === currentPage.pageNum}\n          onClick={()=>changePage(number)}\n        >\n          {number}\n        </Pagination.Item>,\n      );\n    }\n    \n    return (\n      <Pagination >{items}</Pagination>\n    );\n  }\n\n\n  return (\n    \n    <If condition={props.error}>\n      <Then>\n        <Alert className = 'bg-danger'>\n          <h2>\n            {props.error}\n          </h2>\n        </Alert>\n      </Then>\n      <Else>\n        {currentPage['list'].map(item => (\n          <Toast key={item._id} onClose={() => props.handleDelete(item._id)} style={{width: '100%',maxWidth: '100%'}}>\n            <Toast.Header>\n              <strong className={`${item.complete? 'bg-success':'bg-danger'} rounded mr-2 text-white p-1`} onClick={() => props.handleComplete(item._id)}>\n                {item.complete? 'Completed' : 'Pending'}\n              </strong>\n              <span className=\"ml-auto mr-auto h6\">{item.assignee}</span>\n            </Toast.Header>\n            <Toast.Body>\n              <span className='mr-auto h5'>{item.item}</span>\n              <small className='float-right'>{`Difficulty: ${item.difficulty}`}</small>\n            </Toast.Body>\n          </Toast>\n        ))}\n        {renderPagination()}\n      </Else>\n    </If>\n\n  );\n}\n\nTodoList.propTypes = {\n  handleComplete: PropTypes.func,\n  list: PropTypes.array,\n  error: PropTypes.string,\n  handleDelete: PropTypes.func,\n};\n","import {React} from 'react';\nimport {Navbar} from 'react-bootstrap';\n\nexport default function Header (){\n  return(\n    <>\n      <Navbar bg=\"primary\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Home</Navbar.Brand>\n      </Navbar>\n    </>\n  );\n}","//local testing url\n// export default 'http://localhost:3333/api/todo';\n\n// deployed back end url\nexport default 'https://peng-authenticated-api-server.herokuapp.com/api/todo';","import React, {useContext} from 'react';\nimport {Modal, Button, Form} from 'react-bootstrap'; \nimport PropTypes from 'prop-types';\nimport useForm from '../../hooks/useForm';\nimport {SettingsContext} from '../../context/settings.js';\n\n\nfunction SettingsModel (props){\n  \n  const [handleSubmit, handleChange] = useForm(changeSettings);\n\n  const settingsContext = useContext(SettingsContext);\n\n  function changeSettings (newSettingsData){\n\n    settingsContext.setSettings(newSettingsData);\n\n    props.handleClose();\n  }\n\n  return (\n\n    <Modal show={props.show} onHide={props.handleClose} onSubmit={handleSubmit}>\n      <Modal.Header closeButton>\n        <Modal.Title>Settings</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form className = 'font-weight-bold'>\n\n          <Form.Group controlId='showCompleted'>\n            <Form.Label className='mr-3'>Show completed items?</Form.Label>\n            <Form.Control\n              required\n              name='showCompleted'\n              as='select'\n              onChange = {handleChange}\n            >\n              \n              <option value=\"\">...</option>\n              <option value=\"no\">No</option>\n              <option value=\"yes\">Yes</option>\n            </Form.Control>\n          </Form.Group>\n\n          <Form.Group controlId='maxNum'>\n            <Form.Label>How many items do you want to display per page?</Form.Label>\n            <Form.Control\n              required\n              as=\"select\"\n              name='maxNum'\n              type='text'\n              onChange = {handleChange}\n            >\n              <option value=\"\">...</option>\n              <option value=\"5\">5 items</option>\n              <option value=\"6\">6 items</option>\n              <option value=\"7\">7 items</option>\n              <option value=\"8\">8 items</option>\n              <option value=\"9\">9 items</option>\n              <option value=\"10\">10 items</option>\n            </Form.Control>\n          </Form.Group>\n\n          <Form.Group controlId='sort'>\n            <Form.Label>How do you want to sort your to do items?</Form.Label>\n            <Form.Control\n              required\n              as=\"select\"\n              name='sort'\n              type='text'\n              onChange = {handleChange}\n            >\n              <option value=\"\">...</option>\n              <option value=\"difficulty\">By difficulty ratings</option>\n              <option value=\"item\">By item info</option>\n              <option value=\"assignee\">By assignee name</option>\n            </Form.Control>\n          </Form.Group>\n\n          <Form.Group controlId='sortOrder'>\n            <Form.Label className='mr-3'>Sorting order?</Form.Label>\n            <Form.Control\n              required\n              name='sortOrder'\n              as='select'\n              onChange = {handleChange}\n            >\n              \n              <option value=\"\">...</option>\n              <option value=\"ascending\">Ascending</option>\n              <option value=\"descending\">Descending</option>\n            </Form.Control>\n          </Form.Group>\n\n          <Button variant=\"primary\" type='submit' className='float-right'>\n          Save Changes\n          </Button>\n          <Button variant=\"secondary\" onClick={props.handleClose}>\n            Cancel\n          </Button>\n        </Form>\n      </Modal.Body>\n\n    </Modal>\n  );\n}\n\n\nSettingsModel.propTypes = {\n  show: PropTypes.bool,\n  handleClose: PropTypes.func,\n  handleSubmit: PropTypes.func,\n};\n\nexport default SettingsModel;","import React, {useState, useEffect} from 'react';\nimport TodoForm from './components/todo/form';\nimport TodoList from './components/todo/list';\nimport Header from './components/header';\nimport {Container, Row, Col, Button} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport url from './url.js';\n// import useAjax from './hooks/useAjax';\nimport axios from 'axios';\nimport SettingsModal from './components/todo/settingsModal.js';\n\nexport default function App (){\n\n  // const [setConfig, response, error] = useAjax();\n  const [list, setList] = useState([]);\n  const [error, setError] = useState(null);\n  const [showSettings, setShowSettings] = useState(false);\n\n  /**\n   * \n   * @param {obj} item take an obj and save to database\n   */\n  async function addItem (item) {\n    const config = {\n      method: 'post',\n      url,\n      data: {\n        ...item,\n        complete:false,\n      },\n    };\n    if (!config.data.difficulty) {\n      config.data.difficulty=1;\n    }\n    try {\n      await axios(config);\n      await fetchToDoList();\n      setError(null);\n    }\n    catch (error){\n      setError(error.message);\n    }\n  }\n\n  /**\n   * \n   * @param {string} id update the givin itme's complete status in database\n   */\n  async function toggleComplete (id) {\n    let item = list.filter(i => i._id === id)[0] || {};\n\n    const config = {\n      method: 'put',\n      url: `${url}/${id}`,\n      data: {\n        ...item,\n        complete:!item.complete,\n      },\n    };\n    try {\n      await axios(config);\n      localRefresh();\n      setError(null);\n    }\n    catch (error){\n      setError(error.message);\n    }\n    \n    function localRefresh(){\n      item.complete = !item.complete;\n      let newList = [...list];\n      setList(newList);\n    }\n  }\n\n  /**\n   * \n   * @param {string} id delete the givin itme from database\n   */\n  async function deleteItem(id){\n    let item = list.filter(i => i._id === id)[0] || {};\n    const itemIndex = list.indexOf(item);\n\n    const config = {\n      method: 'delete',\n      url: `${url}/${id}`,\n    };\n    try {\n      await axios(config);\n      localRefresh();\n      setError(null);\n    }\n    catch (error){\n      setError(error.message);\n    }\n    function localRefresh(){\n      list.splice(itemIndex,1);\n      let newList = [...list];\n      setList(newList);\n    }\n  }\n\n  \n  async function fetchToDoList (){\n    const config = {\n      method: 'get',\n      url,\n    };\n    try{\n      const {data} = await axios(config);\n      setList(data);\n      setError(null);\n    }\n    catch (error){\n      setError(error.message);\n    }\n  }\n\n  // Runs on app load, modifying items, and change settings. Pulls all the list items from data server\n  useEffect( () => {\n    const getToDoList =  async () => {\n      await fetchToDoList();\n    };\n    getToDoList();\n  }, []);\n  \n\n  // update title\n  useEffect(()=>{\n    document.title = `To Do List: ${list.filter(item => !item.complete).length}`;\n  });\n\n\n  // function to toggle settings modal \n  function toggleSettings(){\n    setShowSettings(!showSettings);\n  }\n\n  return (\n    <>\n      <Header/>\n      <Container className = 'p-3'>\n        <h2 className = 'text-white bg-dark mt-3 p-3'>\n        To Do List Manager ({list.filter(item => !item.complete).length})\n          <Button className='float-right' variant=\"primary\" onClick={toggleSettings}>Settings</Button>\n        </h2>\n        <SettingsModal show={showSettings} handleClose={toggleSettings} ></SettingsModal>\n        <Row className='font-weight-bold'>\n          <Col lg={4} md={6} sm={12} className = 'p-3'>\n            <TodoForm handleSubmit={addItem} />\n          </Col>\n          <Col lg={8} md={6} sm={12} className = 'p-3'>\n            <TodoList\n              list={list}\n              handleComplete={toggleComplete}\n              handleDelete={deleteItem}\n              error={error}\n            />\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\nimport reportWebVitals from './reportWebVitals.js';\nimport SettingsContext from './context/settings.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SettingsContext>\n      <App />\n    </SettingsContext>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}